name: $(Build.BuildNumber)_$(Build.SourceBranchName)

trigger:
- main

pool:
  vmImage: 'windows-latest'  # Windows agent pool

variables:
  buildConfiguration: 'Release'
  solution: '**/*.sln'
  outputDir: '$(Build.ArtifactStagingDirectory)/publish'
  testResultsDir: '$(Build.ArtifactStagingDirectory)/test-results'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build_Job
    displayName: 'Build and Test'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet Packages'
      inputs:
        command: 'restore'
        projects: '$(solution)'

    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests'
      inputs:
        command: 'test'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) --logger trx --results-directory $(testResultsDir)'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/*.trx'
        testRunTitle: 'Unit Tests'

    - task: PowerShell@2
      displayName: 'Generate Build Artifacts'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Publishing build artifacts..."
          dotnet publish $(solution) --configuration $(buildConfiguration) --output $(outputDir)

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(outputDir)'
        ArtifactName: 'drop'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Deploy_Job
    displayName: 'Deploy to Dev'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Artifacts'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: PowerShell@2
      displayName: 'Deploy Application (Simulated)'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Simulating deployment..."
          # Replace with actual deployment logic (e.g., Azure App Service, IIS, etc.)
          Get-ChildItem -Path '$(System.ArtifactsDirectory)/drop' -Recurse | 
            ForEach-Object { Write-Host "Deploying file: $($_.FullName)" }